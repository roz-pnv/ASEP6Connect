# Generated by Django 5.2.4 on 2025-08-04 09:52

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('first_name', models.CharField(help_text="User's first name", max_length=30)),
                ('last_name', models.CharField(help_text="User's last name", max_length=30)),
                ('gender', models.CharField(blank=True, choices=[('male', 'Male'), ('female', 'Female'), ('other', 'Other')], help_text="User's gender identity", max_length=10, null=True)),
                ('job', models.CharField(blank=True, help_text="User's current job or occupation", max_length=50, null=True)),
                ('phone', models.CharField(blank=True, help_text="User's mobile phone number (French format)", max_length=11, null=True, validators=[django.core.validators.RegexValidator(message='Enter a valid French mobile number (e.g. +336xxxxxxxx or 06xxxxxxxx).', regex='^(?:\\+33|0)[67]\\d{8}$')])),
                ('email', models.EmailField(help_text="User's email address (must be unique)", max_length=254, unique=True)),
                ('address', models.TextField(blank=True, help_text="User's residential or mailing address", null=True)),
                ('language', models.CharField(default='fa', help_text='Preferred language for communication (e.g. fa, en, fr)', max_length=10)),
                ('birthdate', models.DateField(blank=True, help_text="User's date of birth", null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is the user account currently active?')),
                ('is_boardofdirector', models.BooleanField(default=False, help_text='Is the user a member of the board of directors?')),
                ('is_student', models.BooleanField(default=False, help_text='Is the user a student?')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date the user account was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date when the user record was last updated')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'ordering': ['-created_at'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='BoardOfDirector',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role_type', models.CharField(choices=[('President', 'President'), ('Vice_President', 'Vice President'), ('Secretary', 'Secretary'), ('Treasurer', 'Treasurer'), ('technical_officer', 'Technical Officer'), ('admissions_officer', 'Admissions Officer')], help_text='Role held by the user on the board', max_length=50)),
                ('start_date', models.DateTimeField(help_text='Start date of the board role')),
                ('end_date', models.DateTimeField(blank=True, help_text='End date of the board role (if applicable)', null=True)),
                ('is_suspended', models.BooleanField(default=False, help_text='Is the board member currently suspended?')),
                ('user', models.ForeignKey(help_text='User serving on the board', on_delete=django.db.models.deletion.CASCADE, related_name='board_roles', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Board Member',
                'verbose_name_plural': 'Board Members',
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='Membership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('member_type', models.CharField(choices=[('main', 'Main'), ('associate', 'Associate'), ('volunteer', 'Volunteer'), ('honorary', 'Honorary')], help_text='Type of membership (Main, Associate, Volunteer, Honorary)', max_length=20)),
                ('can_vote', models.BooleanField(default=False, help_text='Is the member eligible to vote?')),
                ('is_active', models.BooleanField(default=True, help_text='Is the membership currently active?')),
                ('is_confirmed', models.BooleanField(default=False, help_text='Has the membership been officially confirmed?')),
                ('membership_expiry', models.DateField(blank=True, help_text='Date when the membership expires', null=True)),
                ('confirmed_at', models.DateTimeField(blank=True, help_text='Date and time when the membership was confirmed', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date when the membership record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date when the membership record was last updated')),
                ('user', models.ForeignKey(help_text='The user associated with this membership', on_delete=django.db.models.deletion.CASCADE, related_name='memberships', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Membership',
                'verbose_name_plural': 'Memberships',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('state', models.CharField(choices=[('Guided', 'Guided'), ('Waiting', 'Waiting'), ('NotRegistered', 'Not Registered')], help_text='Guidance status of the student (Guided, Waiting, Not Registered)', max_length=20)),
                ('accommodation_type', models.CharField(choices=[('Dormitory', 'Dormitory'), ('Temporary Housing', 'Temporary Housing'), ('Hotel', 'Hotel'), ('Other', 'Other')], default='Dormitory', help_text='Type of accommodation (Dormitory, Temporary Housing, Hotel, Other)', max_length=50)),
                ('field_of_study', models.CharField(help_text="Student's academic field or major", max_length=100)),
                ('country_of_origin', models.CharField(help_text='Country the student is coming from', max_length=100)),
                ('arrival_date', models.DateField(help_text='Date the student arrived')),
                ('guidance_needed', models.BooleanField(default=False, help_text='Does the student need guidance?')),
                ('in_person_assistance', models.BooleanField(default=False, help_text='Has the student requested in-person assistance?')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date this student profile was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date when the student record was last updated')),
                ('user', models.ForeignKey(help_text='The user account associated with this student', on_delete=django.db.models.deletion.CASCADE, related_name='student_profiles', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Student Profile',
                'verbose_name_plural': 'Student Profiles',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['first_name'], name='users_user_first_n_0186c7_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['last_name'], name='users_user_last_na_4e2935_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['created_at'], name='users_user_created_cf865c_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['is_active'], name='users_user_is_acti_ddda02_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['is_boardofdirector'], name='users_user_is_boar_c4cfce_idx'),
        ),
        migrations.AddIndex(
            model_name='boardofdirector',
            index=models.Index(fields=['user'], name='users_board_user_id_88f6b6_idx'),
        ),
        migrations.AddIndex(
            model_name='boardofdirector',
            index=models.Index(fields=['role_type'], name='users_board_role_ty_5a555e_idx'),
        ),
        migrations.AddIndex(
            model_name='boardofdirector',
            index=models.Index(fields=['start_date'], name='users_board_start_d_0db47a_idx'),
        ),
        migrations.AddIndex(
            model_name='boardofdirector',
            index=models.Index(fields=['end_date'], name='users_board_end_dat_cff702_idx'),
        ),
        migrations.AddIndex(
            model_name='boardofdirector',
            index=models.Index(fields=['is_suspended'], name='users_board_is_susp_6c0b13_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='boardofdirector',
            unique_together={('user', 'role_type', 'start_date')},
        ),
        migrations.AddIndex(
            model_name='membership',
            index=models.Index(fields=['user'], name='users_membe_user_id_a489e4_idx'),
        ),
        migrations.AddIndex(
            model_name='membership',
            index=models.Index(fields=['member_type'], name='users_membe_member__459cba_idx'),
        ),
        migrations.AddIndex(
            model_name='membership',
            index=models.Index(fields=['is_active'], name='users_membe_is_acti_7966bd_idx'),
        ),
        migrations.AddIndex(
            model_name='membership',
            index=models.Index(fields=['can_vote'], name='users_membe_can_vot_f76af6_idx'),
        ),
        migrations.AddIndex(
            model_name='membership',
            index=models.Index(fields=['membership_expiry'], name='users_membe_members_36a1e5_idx'),
        ),
        migrations.AddIndex(
            model_name='student',
            index=models.Index(fields=['arrival_date'], name='users_stude_arrival_35ca94_idx'),
        ),
        migrations.AddIndex(
            model_name='student',
            index=models.Index(fields=['country_of_origin'], name='users_stude_country_252c74_idx'),
        ),
        migrations.AddIndex(
            model_name='student',
            index=models.Index(fields=['state'], name='users_stude_state_c41cf3_idx'),
        ),
        migrations.AddIndex(
            model_name='student',
            index=models.Index(fields=['guidance_needed'], name='users_stude_guidanc_24b700_idx'),
        ),
        migrations.AddIndex(
            model_name='student',
            index=models.Index(fields=['in_person_assistance'], name='users_stude_in_pers_9d7e89_idx'),
        ),
    ]
